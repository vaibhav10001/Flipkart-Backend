const { MongoClient } = require('mongodb');
const express = require('express'); // Express framework
const bodyParser = require('body-parser'); // JSON body parsing middleware
const dotenv = require('dotenv'); // For environment variables
const cors = require('cors'); // For Cross-Origin Resource Sharing
const path = require('path'); // Node.js built-in module for path manipulation

// ‚úÖ 1. dotenv.config() ‡§ï‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ENV ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤‡•ç‡§∏ ‡§≤‡•ã‡§° ‡§π‡•ã ‡§ú‡§æ‡§è‡§Ç
dotenv.config();

// 2. ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® URL ‡§ï‡•ã environment variable ‡§∏‡•á ‡§≤‡•á‡§Ç
// ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•á Vercel Environment Variables ‡§Æ‡•á‡§Ç MONGO_URI ‡§∏‡•á‡§ü ‡§π‡•à‡•§
const url = process.env.MONGO_URI;

// ‡§Ö‡§ó‡§∞ MONGO_URI ‡§∏‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§§‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§è‡§∞‡§∞ ‡§¶‡•á‡§Ç ‡§î‡§∞ ‡§è‡§ó‡•ç‡§ú‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç
if (!url) {
    console.error("‚ùå Error: MONGO_URI environment variable is not set. Please set it in your .env file or Vercel settings.");
    process.exit(1); // ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç
}

const client = new MongoClient(url); // MongoDB ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü ‡§á‡§Ç‡§∏‡•ç‡§ü‡•á‡§Ç‡§∏

// Database Name (‡§Ø‡§π ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§≠‡•Ä ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à)
const dbName = 'Ecommerce'; // ‡§Ü‡§™ ‡§á‡§∏‡•á ‡§Ö‡§™‡§®‡•Ä URI ‡§∏‡•á ‡§≠‡•Ä parse ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§Ø‡§æ ‡§Ø‡§π‡§æ‡§Å hardcode ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç

const app = express(); // Express ‡§è‡§™‡•ç‡§≤‡•Ä‡§ï‡•á‡§∂‡§® ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç

// Middlewares
app.use(bodyParser.json()); // JSON ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§¨‡•â‡§°‡•Ä ‡§ï‡•ã ‡§™‡§æ‡§∞‡•ç‡§∏ ‡§ï‡§∞‡•á‡§Ç
app.use(cors({
    origin: '*', // For development, you can use '*'
    // Production ‡§Æ‡•á‡§Ç, ‡§Ü‡§™‡§ï‡•ã ‡§á‡§∏‡•á ‡§Ö‡§™‡§®‡•á ‡§´‡§º‡•ç‡§∞‡§Ç‡§ü‡§è‡§Ç‡§° URL ‡§∏‡•á ‡§¨‡§¶‡§≤‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è, ‡§â‡§¶‡§æ: 'https://your-frontend-app.vercel.app'
    credentials: true, // ‡§Ö‡§ó‡§∞ ‡§Ü‡§™ ‡§ï‡•Å‡§ï‡•Ä‡§ú‡§º ‡§Ø‡§æ ‡§ë‡§•‡§∞‡§æ‡§á‡§ú‡•á‡§∂‡§® ‡§π‡•á‡§°‡§∞ ‡§≠‡•á‡§ú ‡§∞‡§π‡•á ‡§π‡•à‡§Ç
}));

// ‚úÖ 3. Static ‡§´‡§º‡§æ‡§á‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è (‡§Ö‡§ó‡§∞ ‡§Ü‡§™ 'public' ‡§´‡§º‡•ã‡§≤‡•ç‡§°‡§∞ ‡§∏‡•á ‡§´‡§º‡§æ‡§á‡§≤‡•á‡§Ç ‡§∏‡§∞‡•ç‡§µ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç)
// Vercel Serverless Functions ‡§Æ‡•á‡§Ç static ‡§´‡§º‡§æ‡§á‡§≤‡•á‡§Ç ‡§Ü‡§Æ‡§§‡•å‡§∞ ‡§™‡§∞ ‡§Ö‡§≤‡§ó ‡§∏‡•á ‡§π‡•à‡§Ç‡§°‡§≤ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡§Ç,
// ‡§≤‡•á‡§ï‡§ø‡§® ‡§≤‡•ã‡§ï‡§≤ ‡§°‡•á‡§µ‡§≤‡§™‡§Æ‡•á‡§Ç‡§ü ‡§Ø‡§æ ‡§ï‡•Å‡§õ ‡§ñ‡§æ‡§∏ Serverless configs ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π ‡§†‡•Ä‡§ï ‡§π‡•à‡•§
app.use('/static', express.static(path.join(__dirname, 'public')));
app.use(express.json()); // body-parser.json() ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§Ø‡§π redundant ‡§π‡•à ‡§Ö‡§ó‡§∞ ‡§∏‡§ø‡§∞‡•ç‡§´ JSON ‡§π‡•à
module.exports = app;
// ‚úÖ 4. ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®
// ‡§á‡§∏‡•á 'middleware' ‡§Ø‡§æ 'route handler' ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§® ‡§∞‡§ñ‡•á‡§Ç‡•§
// ‡§á‡§∏‡•á ‡§è‡§ï ‡§¨‡§æ‡§∞ ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º‡•á‡§∂‡§® ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§
async function connectToMongo() {
    try {
        await client.connect();
        console.log("‚úÖ Connected to MongoDB!");

        // MongoDB client ‡§ï‡•ã app.locals ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§∞‡•Ç‡§ü‡•ç‡§∏ ‡§á‡§∏‡•á ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§∞ ‡§∏‡§ï‡•á‡§Ç
        // ‡§Ø‡§æ ‡§∏‡•Ä‡§ß‡•á client ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§Ö‡§ó‡§∞ ‡§µ‡§π global scope ‡§Æ‡•á‡§Ç ‡§π‡•à‡•§
        // app.locals.db = client.db(dbName);

        // ‚úÖ Vercel Serverless Functions ‡§ï‡•á ‡§≤‡§ø‡§è, app.listen() ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à
        // ‡§≤‡•ã‡§ï‡§≤ ‡§°‡•á‡§µ‡§≤‡§™‡§Æ‡•á‡§Ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™ ‡§á‡§∏‡•á ‡§Ø‡§π‡§æ‡§Å ‡§∞‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:
        if (process.env.NODE_ENV !== 'production') { // Check if not in production
            app.listen(3000, () => {
                console.log("üöÄ Local Server running on port 3000");
            });
        }

    } catch (e) {
        console.error("‚ùå Failed to connect to MongoDB:", e);
        process.exit(1); // ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§´‡•á‡§≤ ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡•ã ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç
    }
}

// ‚úÖ 5. MongoDB ‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
connectToMongo();


// ‚úÖ This route returns the full user object by username
app.get('/api/user/profile/:username', async (req, res) => {
    const db = client.db(dbName);
    const collection = db.collection('Userdata');
    const { username } = req.params;
    console.log("Fetching user profile for:", username);
    try {
        const user = await collection.findOne({ Username: username });
        console.log("Full user data in user profile ", user);
        if (!user) {
            return res.status(404).json({ success: false, message: "User not found" });
        }
        const userProfileToSend = {
            _id: user._id ? user._id.toString() : null,
            Username: user.Username || "",
            Name: user.Name || "",
            Email: user.Email || "",
            Gender: user.Gender || "",
            Address: user.Address || "",
            Phone_Number: user.Phone_Number || "",
            id: user.id || "",
            addToCart: user.addToCart || [],
            Orders: user.Orders || []
        };
        console.log("after filtering user data in profile", userProfileToSend)
        res.json(userProfileToSend); //

    } catch (err) {
        console.error("Error fetching user:", err);
        res.status(500).json({ success: false, message: "Internal server error" });
    }
});

app.get('/', async (req, res) => {
    const db = client.db(dbName);
    const collection = db.collection('Userdata');
    const findResult = await collection.find({}).toArray();
    console.log('Found documents =>', findResult);
    res.json(findResult)
})
app.post('/', async (req, res) => {
    const userdata = req.body
    const db = client.db(dbName);
    const collection = db.collection('Userdata');
    const findResult = await collection.insertOne(userdata);
    res.send({ success: true, result: findResult })
})

app.post("/add-To-Cart", async (req, res) => {
    const db = client.db(dbName);
    const collection = db.collection("Userdata");
    const { username, productId, name, price, productImg, quantity } = req.body;
    const cartItem = { productId, name, price, productImg, quantity };
    const result = await collection.updateOne(
        { Username: username },
        { $push: { addToCart: cartItem } }
    );
    if (result.modifiedCount > 0) {
        return res.json({ message: "Item added to cart", success: true });
    } else {
        return res.json({ message: "User not found", success: false });
    }

});

app.get("/CartPage/:Username", async (req, res) => {
    const db = client.db(dbName);
    const collection = db.collection("Userdata");
    const user = await collection.findOne({ Username: req.params.Username });
    if (user) {
        return res.json(user.addToCart);
    } else {
        return res.status(404).json({ message: "User not found" });
    }
});
app.post("/remove-From-Cart", async (req, res) => {
    const db = client.db(dbName);
    const collection = db.collection("Userdata");
    const { username, productId } = req.body;
    const result = await collection.updateOne(
        { Username: username },
        { $pull: { addToCart: { productId: productId } } }
    );
    if (result.modifiedCount > 0) {
        return res.json({ message: "Item removed from cart", success: true });
    } else {
        return res.json({ message: "Item not found in cart", success: false });
    }
});



app.post("/EmptyCart", async (req, res) => {
    const db = client.db(dbName);
    const collection = db.collection("Userdata");
    const { username } = req.body;
    const result = await collection.updateOne(
        { Username: username },
        { $set: { addToCart: [] } }
    );
    if (result.modifiedCount > 0) {
        return res.json({ message: "Cart Is Empty", success: true });
    } else {
        return res.json({ message: "Error during Emptying the Cart", success: false });
    }
});

app.post('/login', async (req, res) => {
    const { email, password } = req.body;
    const db = client.db(dbName);
    const collection = db.collection('Userdata');

    try {
        const user = await collection.findOne({ Email: email, Password: password });

        if (user) {
            console.log("Full user object from MongoDB (before processing):", user); // Debugging line

            // ‚úÖ user._id ‡§ï‡•ã string ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç
            // ‚úÖ user ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§∏‡•á ‡§ï‡•á‡§µ‡§≤ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§´‡§º‡•Ä‡§≤‡•ç‡§°‡•ç‡§∏ ‡§ï‡•ã ‡§è‡§ï ‡§®‡§è ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§Æ‡•à‡§™ ‡§ï‡§∞‡•á‡§Ç
            const userToSend = {
                _id: user._id.toString(), // ObjectId ‡§ï‡•ã string ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç
                Username: user.Username,
                Name: user.Name,
                Email: user.Email,
                // Password: user.Password, // ‚ùå ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ï‡§æ‡§∞‡§£‡•ã‡§Ç ‡§∏‡•á ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§® ‡§≠‡•á‡§ú‡•á‡§Ç
                Gender: user.Gender,
                Address: user.Address,       // ‡§Ø‡§π ‡§è‡§ï array ‡§π‡•à, ‡§∏‡•Ä‡§ß‡•á ‡§≠‡•á‡§ú‡•á‡§Ç
                Phone_Number: user.Phone_Number,
                id: user.id,                 // ‡§Ø‡§π ‡§è‡§ï string id ‡§π‡•à, ‡§∏‡•Ä‡§ß‡•á ‡§≠‡•á‡§ú‡•á‡§Ç
                addToCart: user.addToCart,   // ‡§Ø‡§π ‡§è‡§ï array ‡§π‡•à, ‡§∏‡•Ä‡§ß‡•á ‡§≠‡•á‡§ú‡•á‡§Ç
                Orders: user.Orders          // ‡§Ø‡§π ‡§è‡§ï array ‡§π‡•à, ‡§∏‡•Ä‡§ß‡•á ‡§≠‡•á‡§ú‡•á‡§Ç
            };

            const dataToSend = { success: true, user: userToSend };

            // ‚úÖ ‡§∏‡§¨‡§∏‡•á ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§¨‡§¶‡§≤‡§æ‡§µ: res.json() ‡§ï‡•ã ‡§∏‡•Ä‡§ß‡•á JavaScript ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§™‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç
            // ‡§á‡§∏‡•á ‡§Æ‡•à‡§®‡•ç‡§Ø‡•Å‡§Ö‡§≤ ‡§∞‡•Ç‡§™ ‡§∏‡•á JSON.stringify() ‡§® ‡§ï‡§∞‡•á‡§Ç
            console.log("Login success response (object to be sent as JSON):", dataToSend);
            return res.json(dataToSend); // Express ‡§á‡§∏‡•á ‡§Ö‡§™‡§®‡•á ‡§Ü‡§™ JSON stringify ‡§ï‡§∞‡•á‡§ó‡§æ
        } else {
            // ‡§ó‡§≤‡§§ ‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è
            return res.status(401).json({ success: false, message: "Invalid credentials" });
        }
    } catch (error) {
        // ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§∏‡§∞‡•ç‡§µ‡§∞-‡§∏‡§æ‡§á‡§° ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§ï‡•ã ‡§™‡§ï‡§°‡§º‡•á‡§Ç
        console.error("Error during login request:", error);
        return res.status(500).json({ success: false, message: "Internal Server Error" });
    }
});

app.post('/signup', async (req, res) => {
    const db = client.db(dbName);
    const collection = db.collection('Userdata');
    const { Username, Name, Email, Password, Gender, Address, Phone_Number, id, addToCart, Orders } = req.body;
    const Usersdata = { Username, Name, Email, Password, Gender, Address, Phone_Number, id, addToCart, Orders };
    console.log("Usersdata in js", Usersdata)
    const user = await collection.findOne({ Email: Email });
    if (user) {
        console.log("This email already exist!!!")
        return res.send({ success: false, message: "Email already exists" });
    } else {
        const result = await collection.insertOne(Usersdata);
        console.log("result", result)
        return res.send({ success: true, message: "Signup successful", data: result });
    }
});

app.post('/my-profile', async (req, res) => {
    const db = client.db(dbName);
    const collection = db.collection('Userdata');
    const { Username, Name, Email, Password, id, addToCart } = req.body;
    const Usersdata = { Username, Name, Email, Password, id, addToCart };
    console.log(Usersdata)
    const user = await collection.findOne({ Email: Email });
    if (user) {
        console.log("This email already exist!!!")
        return res.send({ success: false, message: "Email already exists" });
    } else {
        const result = await collection.insertOne(Usersdata);
        console.log("result", result)
        return res.send({ success: true, message: "Signup successful", data: result });
    }
});

// request for data to order
app.post("/Order", async (req, res) => {
    const db = client.db(dbName);
    const collection = db.collection("Userdata");
    const { username, OrderId, Address, TotalAmount, ProductData, Name, Email, Phone_number, BaseAmount, CashHandlingCharge, DeliveryCharge, Tax, DeliveredDate, OrderedDate, CancelledDate, OrderStatus } = req.body;
    const order = { OrderId, Address, TotalAmount, ProductData, Name, Email, Phone_number, BaseAmount, CashHandlingCharge, DeliveryCharge, Tax, DeliveredDate, OrderedDate, CancelledDate, OrderStatus };
    const result = await collection.updateOne(
        { Username: username },
        { $push: { Orders: order } }
    );
    if (result.modifiedCount > 0) {
        return res.json({ message: "Item added to cart", success: true });
    } else {
        return res.json({ message: "User not found", success: false });
    }
});



app.post("/CancelOrder", async (req, res) => {
    try {
        const db = client.db(dbName);
        const collection = db.collection("Userdata");

        const { username, OrderId, CancelDate } = req.body;

        const result = await collection.updateOne(
            {
                Username: username,
                "Orders.OrderId": OrderId
            },
            {
                $set: {
                    "Orders.$.OrderStatus": "Cancelled",
                    "Orders.$.CancelledDate": CancelDate
                }
            }
        );

        if (result.modifiedCount > 0) {
            return res.json({ message: "Order cancelled successfully", success: true });
        } else {
            return res.json({ message: "Order not found or already cancelled", success: false });
        }
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: "Internal server error", success: false });
    }
});


// request for orders from database 
app.get("/Order/:Username", async (req, res) => {
    const db = client.db(dbName);
    const collection = db.collection("Userdata");
    const user = await collection.findOne({ Username: req.params.Username });
    if (user) {
        return res.json(user.addToCart);
    } else {
        return res.status(404).json({ message: "User not found" });
    }
});

// update profile of a user 
app.post("/updateprofile", async (req, res) => {
    const db = client.db(dbName);
    const collection = db.collection('Userdata');
    const { Name, Email, Gender, Phone_Number, OldEmail } = req.body;

    // Make sure the required fields are not empty
    if (!Email || !Name || !Phone_Number) {
        return res.send({ success: false, message: "All fields are required!" });
    }

    // If the email is being updated, check if the new email already exists in the database
    let emailExists = false;
    if (Email !== OldEmail) {  // Check if the email is different from the old one
        const emailCheck = await collection.findOne({ Email: Email });
        if (emailCheck) {
            emailExists = true;  // Set emailExists to true if the email already exists
        }
    }

    // If the email is already in use, return an error
    if (emailExists) {
        return res.send({ success: false, message: "This email already exists!" });
    }

    // Update the user profile (including Email, Gender, Name, Phone_Number)
    const result = await collection.updateOne(
        { Email: OldEmail }, // Use the old email to find the user
        {
            $set: {
                Name,
                Gender,
                Phone_Number,
                Email, // Update email only if it's changed
            },
        }
    );

    if (result.modifiedCount > 0) {
        console.log(result)
        return res.send({ success: true, message: "Profile updated successfully" });
    } else {
        return res.send({ success: false, message: "No changes detected or user not found" });
    }
});

app.post("/AddAddress", async (req, res) => {
    const db = client.db(dbName);
    const collection = db.collection('Userdata');
    const { id, Name, Email, Phone_number, PIN_Code, Locality, Address, City, State, Landmark, Alternate_Phone_Number, Address_Type } = req.body;
    const address = { id, Name, Email, Phone_number, PIN_Code, Locality, Address, City, State, Landmark, Alternate_Phone_Number, Address_Type };

    // Update the user profile (including Email, Gender, Name, Phone_Number)

    const result = await collection.updateOne(
        { Email: Email },
        { $push: { Address: address } }
    );
    if (result.modifiedCount > 0) {
        return res.send({ success: true, message: "Address Added Successfully" });
    } else {
        return res.send({ success: false, message: "Error Occured" });
    }
});
console.log("Hello Welcome To Flipkart Website!!!")
// DELETE /api/address/:id
app.delete('/api/address/:id', async (req, res) => {
    const { id } = req.params;
    const db = client.db(dbName);
    const collection = db.collection('Userdata');
    try {
        const result = await collection.updateOne(
            { "Address.id": id },
            { $pull: { Address: { id: id } } }
        );
        if (result.modifiedCount === 0) {
            return res.status(404).json({ error: "Address not found" });
        }
        res.status(200).json({ message: "Address deleted successfully" });
    } catch (err) {
        console.error("Error while deleting address:", err);
        res.status(500).json({ error: "Internal server error" });
    }
});

// Express.js example
app.put('/EditAddress/:id', async (req, res) => {
    const db = client.db(dbName);
    const collection = db.collection('Userdata');
    const { id } = req.params;
    const updatedData = req.body;
    try {
        const result = await collection.updateOne(
            { "Address.id": id },
            { $set: { "Address.$": updatedData } }
        )
        if (result.matchedCount === 0) {
            return res.status(404).json({ message: "Address not found" });
        }
        res.status(200).json({ message: "Address updated successfully" });
    } catch (error) {
        console.error("Update Error:", error);
        res.status(500).json({ message: "Error updating address", error });
    }
});
app.post('/checkout', async (req, res) => {
    const db = client.db(dbName);
    const collection = db.collection('Userdata');
    const { username, cart } = req.body;

    try {
        for (const item of cart) {
            const result = await collection.updateOne(
                {
                    Username: username,                       // ‚úÖ your document key
                    "addToCart.productId": item.productId     // ‚úÖ match by number
                },
                {
                    $set: {
                        "addToCart.$.quantity": item.quantity   // ‚úÖ update quantity
                    }
                }
            );

            console.log(`productId: ${item.productId}, quantity: ${item.quantity}`);
            console.log("Matched:", result.matchedCount, "Modified:", result.modifiedCount);
        }

        res.status(200).json({ message: "Cart updated successfully" });
    } catch (error) {
        console.error("Update Error:", error);
        res.status(500).json({ message: "Error updating address", error });
    }
});


app.all('*', (req, res) => {
    res.status(404).json({ success: false, message: `Route ${req.method} ${req.originalUrl} not found` });
});

// ‚úÖ 6. App Listen - Vercel Serverless Functions ‡§Æ‡•á‡§Ç ‡§Ø‡§π ‡§á‡§ó‡•ç‡§®‡•ã‡§∞ ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ
const port = process.env.PORT || 3000;
app.listen(port, '0.0.0.0', () => { // '0.0.0.0' ‡§≤‡•ã‡§ï‡§≤ ‡§Æ‡§∂‡•Ä‡§® ‡§™‡§∞ ‡§∏‡§≠‡•Ä ‡§á‡§Ç‡§ü‡§∞‡§´‡•á‡§∏ ‡§™‡§∞ ‡§∏‡•Å‡§®‡§§‡§æ ‡§π‡•à
    console.log(`Example app listening on port ${port}`);
});